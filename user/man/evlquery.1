.\" This manpage has been automatically generated by docbook2man
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.  This man page
.\" has been modified by Dennis Grace to make the table appear
.\" as a table. For further information, contact Dennis Grace
.\" at dgrace@us.ibm.com
.TH "EVLQUERY" "" "6 December 2002" ""
.SH NAME
evlquery \- Query and filter expression rules
.SH SYNOPSIS

\fBevlquery\fR is not a command, but provides query and filter
expression rules for the evlview, evlconfig, evlnotify and
evlogmgr commands.

.SH "DESCRIPTION"
.PP
A simple query or filter expression is a single test of
the form 

.nf
<attribute-name> <op> <val>

.fi
where
.TP 0.2i
\(bu
\fIattribute-name\fR
is the name of an event
attribute.
.TP 0.2i
\(bu
\fIop\fR
is a comparison operator such as
== or <.
.TP 0.2i
\(bu
\fIval\fR
is the reference value for the test (typically
a symbolic constant, an integer constant, or a
string literal).
.PP
An event record is said to pass the test if the
comparison between the reference value and the value of the
named attribute in the event record evaluates to true
(non-zero). 
.PP
More complex queries can be constructed by combining
queries using operators such as
\fB&&\fR and \fB||\fR
(\fBand\fR and \fBor\fR,
respectively), or by negating a query using the
\fB!\fR operator. An event record is said to
match a query if the query expression evaluates to true
(non-zero) for that record.
.PP

The following table lists the supported operations on 
event record attributes.

Note that the 5th column, \fBStd\fR, contains
either a \fBY\fR (yes) if this row of the table
is required by the draft POSIX standard, or an \fBN\fR (no)
if it represents an extension in Linux event logging.

Also note that following each "row" of the table is 
the interpretation of \fI<attribute-name> <op> <val>\fR.
For example, "Integer comparison".


\fBposix_log_entry   Attribute   Operand   Supported     Std
\fR\fBMember             name        type      operations \fR

\fBlog_recid\fR          recid      integer   =, !=, <,      Y
                                        <=, >, >= 

Integer comparison


\fBlog_size\fR           size       integer   =, !=, <,      Y
                                        <=, >, >=

Integer comparison


\fBlog_format\fR         format     integer   =, !=, <,      Y
                                        <=, >, >=

Integer comparison. \fIval\fR shall be an integer constant,
or one of the following format names:
NODATA, STRING, BINARY.


\fBlog_event_type\fR     event_type integer   =, !=, <,      Y
                                        <=, >, >=

Integer comparison


\fBlog_facility\fR       facility   string    =, !=          Y

\fIstrcmp\fR of string representation of \fIlog_facility\fR with \fIval\fR. \fIval\fR
shall be a string literal; one of the following facility names:
AUTH, CRON, DAEMON, KERN, LPR, MAIL, NEWS, SYSLOG, LOGMGMT,
USER, LOCAL0, LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6,
LOCAL7, or other facility name defined in the facility registry.

\fBlog_facility\fR       facility   string    ~, !~          Y

\fIregexec\fR comparison of string representation of \fIlog_facility\fR
with regular expression \fIval\fR.

\fBlog_facility\fR       facility   integer   =, !=, <,      N
                                        <=, >, >=

Integer comparison.


\fBlog_severity\fR       severity   severity   =, !=, <,     Y
                                         <=, >, >=

Compare of \fIlog_severity\fR with \fIval\fR. \fIval\fR
shall be one of the following severity names: EMERG, ALERT, CRIT, ERR, WARNING,
NOTICE, INFO, DEBUG.



\fBlog_uid\fR            uid        integer    =, !=, <,     Y
                                         <=, >, >=

Integer comparison.

\fBlog_uid\fR            uid        string     =, !=         Y

\fIstrcmp\fR of string representation of \fIlog_uid\fR with \fIval\fR.



\fBlog_gid\fR            gid        integer    =, !=, <,     Y
                                         <=, >, >=

Integer comparison.



\fBlog_gid\fR            gid        string     =, !=         Y

\fIstrcmp\fR of string representation of \fIlog_gid\fR with \fIval\fR.



\fBlog_pid\fR            pid        integer    =, !=, <,     Y
                                         <=, >, >=

Integer comparison.



\fBlog_pgrp\fR           pgrp       integer    =, !=, <,     Y
                                         <=, >, >=Y

Integer comparison.



\fBlog_time\fR           time       integer    =, !=, <,     Y
                                         <=, >, >=Y

Interpret \fIval\fR as \fItime_t\fR and perform integer comparison with
\fIlog_time.tv_sec\fR.

\fBlog_time\fR           time       string     =, !=,        N
                                         contains

\fIstrcmp\fR of string representation of \fIlog_time\fR with \fIval\fR.

\fBlog_time\fR           time       string     ~, !~         N

\fIregexec\fR of string representation of \fIlog_time\fR with regular
expression \fIval\fR.



\fBlog_time\fR           age        integer    =, !=, <,     N
                                         <=, >, >=

Comparison of the age of the event record, in days, with
\fIval\fR.

The age of an event record is \fBnow\fR (as returned by
\fItime\fR()) minus the event record's timestamp. \fBnow\fR is
computed each time that the query is evaluated against an event record.

If a letter does not follow the numeric value (ie. 'age >"7d" '), then the
numeric value is interpreted as "number of days."


\fBlog_time\fR           age        string     =, !=, <,     N
                                         <=, >, >=

Comparison of the age of the event record with the time span
indicated by \fIval\fR. \fIval\fR shall consist of a decimal integer
followed by the letter s (seconds), m (minutes), h (hours),
or d (days).

The age of an event record is \fBnow\fR (as returned by
\fItime\fR()) minus the event record's timestamp. \fBnow\fR is
computed each time that the query is evaluated against an event record.

If a letter does not follow the numeric value (ie. 'age >"7d" '), then the
numeric value is interpreted as "number of days."




\fBlog_flags\fR         flags       integer    &             Y

\fIlog_flags & val\fR. \fIval\fR shall be an integer constant or the name
TRUNCATE, KERNEL, PRINTK or INTERRUPT.



\fBlog_thread\fR        thread      string     =, !=         Y

\fIstrcmp\fR of string representation of \fIlog_thread\fR with \fIval\fR.

\fBlog_thread\fR        thread      integer    =, !=, <,     N
                                         <=, >, >=

Integer comparison.



\fBlog_processor\fR     processor   string     =, !=         Y

\fIstrcmp\fR of string representation of \fIlog_thread\fR with \fIval\fR.

\fBlog_processor\fR     processor   string     ~, !~         Y

\fIregexec\fR of string representation of \fIlog_processor\fR with
regular expression \fIval\fR.

\fBlog_processor\fR     processor   integer    =, !=, <,     N
                                         <=, >, >=

Integer comparison.



\fBNone\fR              host        string     =, !=         N

\fIstrcmp\fR of string representation of \fIhostname\fR with \fIval\fR.
The string representation of hosts other than the local host, along
with the integer value assigned to it, are stored in \fI/var/evlog.d/evlhosts\fR.
The integer value assigned to the local host is always 0. 


\fBNone\fR              host        string     ~, !~         N

\fIregexec\fR comparison of string representation of \fIhostname\fR
with regular expression \fIval\fR.  The string representation of hosts other
than the local host, along with the integer value assigned to it, are stored
in \fI/var/evlog.d/evlhosts\fR.  The integer value assigned to the local host
is always 0.



\fBNone\fR              host        integer    =, !=         N

Integer comparison.  The string representation of hosts other 
than the local host, along with the integer value assigned to it, are stored
in \fI/var/evlog.d/evlhosts\fR.  The integer value assigned to the local host 
is always 0.









\fBNone\fR              data        string     =, !=         Y

If the value of \fIlog_format\fR is POSIX_LOG_STRING, \fIstrcmp\fR of
the variable portion of the record with \fIval\fR; otherwise zero.



\fBNone\fR              data        string     contains      Y

Evaluates to 1 if the value of \fIlog_format\fR is POSIX_LOG_STRING
and the substring \fIval\fR appears in the variable portion of the
record; otherwise zero.



\fBNone\fR              data        string     ~, !~         Y

If the value of \fIlog_format\fR is POSIX_LOG_STRING, \fIregexec\fR
comparison of the variable portion of the record with the
regular expression \fIval\fR; otherwise zero.

.PP
