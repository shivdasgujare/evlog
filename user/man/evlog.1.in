.\" This manpage has been modified by Tom Hanrahan
.\" of the IBM LTC RAS development group from a document
.\" automatically generated by docbook2man
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/>
.\" Please send any bug reports, improvements, comments, patches,
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.\" For questions regarding the content of this manpage,
.\" contact <lkessler@users.sourceforge.net>.
.TH "EVLOG" "" "6 December 2002" ""Introduction
.SH NAME
Introduction to Event Logging
.SH "DESCRIPTION"
.PP
Event logging implements the proposed POSIX Standard - Event Logging
[C Language]. In this implementation, event records are stored in
binary format. Binary records give you the ability to capture
sophisticated event records but they require you to use specialized
commands to create, view and maintain event logs and event
records. This manpage describes the set of specialized commands and
services that support event logging.
.PP 
By default, event logging creates two logs:
.TP
\fB@localstatedir@/eventlog\fR
\fIEventlog\fR is the primary system log. It contains all event
records that are publically viewable.
.TP
\fB@localstatedir@/privatelog\fR
\fIPrivatelog\fR is a secondary system log that contains records you
generally don't want to be publically viewable.  By default, only
event records with facility of \fIAUTHPRIV\fR are written to this
log.  However, events from other facilities can also be written to
this log, as specified with the \fIevlfacility\fR command.
An example of private
records are those associated with port connections for services
running on a system.
.PP
In addition to letting you create and maintain logs, event logging
provides you the ability to be notified when events of interest to you
occur and lets you specify what actions you want to execute
automatically in response to those events.
.SH "COMMANDS"
.TP
\fBevlview(1)\fR
Lets you display event records from a POSIX-standard event
log. \fIevlview\fR gives you many options for selecting what records
you view and for designating what format to use in displaying those
records.
.TP
\fBevlfacility(1)\fR
Lets you register and list facilities defined for a system. 
Facilities are simply the components of a system that issue event
records.  Facilities include the kernel, device drivers, services,
such as mail, cron and ftp, and user applications.  Event log
facilities include, but are not limited to, facilities defined for
syslog. \fIevlfacility\fR ensures that facilities you register are
uniquely identified across systems.
.TP
\fBevlnotify(1)\fR
Lets you register a description of those events for which you want to
be automatically notified and lets you specify an action you want to
have executed on your behalf when such events occur.
.TP
\fBevlconfig(1)\fR
Lets you change the configurable settings for event logging.
Configurable settings include the count and time interval for removing
duplicate records, a severity level to indicate which (if any) events
you want displayed to the system console, and filters for screening
out events you don't want written to the system log.
.TP
\fBevltc(1)\fR
Compiles formatting templates containing C-like structures used for 
parsing and displaying event data, for example by the \fIevlview\fR
command.  
.TP
\fBevlogmgr(1)\fR
Lets you perform log management on the event log, on the private log,
or optionally, on a log file that you  specify.  You specify which
events are to be deleted. The space freed by deleted events is
reused for undeleted events (a process referred to as compaction) and
the log file is truncated, thus reducing its overall size.
.TP
\fBevlsend(1)\fR
Lets you send event records from scripts or directly from a command 
line.
.SH "QUERIES"
The commands \fIevlview\fR, \fIevlnotify\fR, \fIevlconfig\fR,
and \fIevlogmgr\fR let you specify a query or filter to describe
the kinds of events in which you are interested.  For details of how
to specify queries, see \fBevlquery(1)\fR.
.SH "DAEMONS"
.TP
\fB/sbin/evlogd\fR
The event log daemon reads event records from facilities running in
the kernel and in user space and writes those records to the
appropriate local POSIX-standard log file.  Additionally, plug-ins can be
provided that register with evlogd to receive the event stream
and provide alternative methods of processing and logging the events.

2 plug-ins are provided with the event logging package:   
the \fB udp_rmtlog_be\fR plugin and \fBtcp_rmtlog_be\fR 
plugin which forward
events to a centralized event consolidation host, using UDP and
TCP, respectively.
.TP
\fB/sbin/evlogrmtd\fR 
The remote event daemon receives event records from other hosts on the
network that are transmitting with the \fB udp_rmtlog_be\fR or
\fBtcp_rmtlog_be\fR plugin, and
if the source host is listed in the \fI/etc/evlog.d/evlhosts\fR file,
passes the event record to the evlogd.  Otherwise, the event record is
rejected and discarded by the evlogrmtd. 
.TP
\fB/sbin/evlnotifyd\fR
The event notification daemon accepts notification requests from
client processes, reads event records as they are logged and signals
client processes when registered events are logged. 
.TP
\fB/sbin/evlactiond\fR
The event action daemon processes requests for action registered
through the notification daemon and executes those actions on behalf
of the requester.
.\"
.SH "SEE ALSO"
evlview(1), evlfacility(1), evlnotify(1), evlconfig(1), evltc(1), 
evlogmgr(1), evlsend(1), evlquery(1), evlremote(1)
